name: Build and Deploy (Password SSH)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file for Docker
        run: |
          echo "ES_HOST=${{ secrets.ES_HOST }}" >> .env
          echo "ES_USER=${{ secrets.ES_USER }}" >> .env
          echo "ES_PASSWORD=${{ secrets.ES_PASSWORD }}" >> .env
          echo "TELEGRAM_CHATS_INDEX_NAME=${{ secrets.TELEGRAM_CHATS_INDEX_NAME }}" >> .env
          echo "SEED_INDEX_NAME=${{ secrets.SEED_INDEX_NAME }}" >> .env
          # 필요 시 추가 환경변수
          echo "PYTHONUNBUFFERED=1" >> .env

      - name: Build Docker image
        run: docker build -t chatting-embedding:latest .

      - name: Save Docker image as tar
        run: docker save chatting-embedding:latest -o chatting_embedding.tar

      - name: Make deploy bundle (single archive)
        run: |
          chmod 644 chatting_embedding.tar
          tar czf deploy_bundle.tgz chatting_embedding.tar docker-compose.yml .env

      - name: Copy bundle to server (password auth)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "deploy_bundle.tgz"
          target: "~/chatting-embedding-deploy/"

      - name: Deploy on server (load & compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -e
            cd ~/chatting-embedding-deploy
            tar xzf deploy_bundle.tgz
            rm -f deploy_bundle.tgz
            docker load -i chatting_embedding.tar
            rm -f chatting_embedding.tar
            # 기존 컨테이너 중지/삭제 후 재기동
            docker compose down || true
            docker compose up -d
            docker image prune -f

